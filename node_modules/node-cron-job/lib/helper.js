var Promise = require('promise');
var parser = require('cron-parser');

const MAX_INT = 2147483647;


exports.convertToTime = function convertToTime(_after) {
    
    var milliseconds = 0;
    
    if(_after.hasOwnProperty('days') && _after.days) {
        milliseconds = _after.days ? _after.days * 24 * 60 * 60 * 1000 : 0; 
    }
    
    if(_after.hasOwnProperty('hours') && _after.hours) {
        milliseconds += _after.hours ? _after.hours * 60 * 60 * 1000 : 0;
    }
    
    if(_after.hasOwnProperty('minutes') && _after.minutes) {
        milliseconds += _after.minutes ? _after.minutes * 60 * 1000 : 0;
    }
    
    if(_after.hasOwnProperty('seconds') && _after.seconds) {
        milliseconds += _after.seconds ? _after.seconds * 1000 : 0;
    }
    
    return milliseconds;
}


exports.convertToPromise = function convertToPromise(_on) {
    
  return new Promise(function(resolve, reject) {
    
    var _interval = getNextInterval(_on);
    /*var overtime  = _interval > MAX_INT ? _interval - MAX_INT : 0;
    var times     = [];
    
    while(overtime > MAX_INT) {
        
        times.push(MAX_INT);
        overtime -= MAX_INT;
    }
    
    times.push(overtime);
    goOver(times, 0, resolve);
    var res = resolve;
    setTimeout(function(){ goOver(times, 1, res); }, times[0]);*/
    
    setTimeout(function(){ resolve(); }, _interval);
    
  });
}


function getNextInterval(_on) {
    
    var today = new Date();
    
    try {
        var interval = parser.parseExpression(_on);
        var nextDate = new Date(interval.next().toString());
        
    } catch (err) {
        console.log('Error: ' + err.message);
    }
    
    return nextDate - today;
}


function goOver(times, i, res) {
    
    if(i < times.length) {
        
        setTimeout(function(res) { goOver(times, i+1, res) }, times[i]);
    }
    else {
        res("Done "+i);
    }
}